// Generated by CoffeeScript 1.9.3
(function() {
  var controller, db, express, getEntryCountMatchingData, insertAndReCalculate, url;

  express = require('express');

  controller = express.Router();

  url = require('url');

  db = require('../models/DB');

  controller.get('/stock', function(req, res) {
    var query, stockname;
    query = req.query;
    stockname = query.stockname;
    return db.get('stocklist').count({
      stockname: stockname
    }).then(function(count) {
      var collection, editId, error, liveEditEntry;
      if (count > 0) {
        collection = db.get('entries');
        liveEditEntry = null;
        if (query.edit) {
          editId = query._id;
          collection.findOne({
            _id: query._id
          }, function(err, entry) {
            return liveEditEntry = entry;
          });
        } else {
          editId = false;
          liveEditEntry = query;
        }
        return collection.find({
          stockname: stockname
        }, {
          sort: {
            year: 1,
            month: 1,
            day: 1,
            tradenumber: 1
          }
        }, function(err, entries) {
          entries['stockname'] = stockname;
          return res.render('stock', {
            title: stockname,
            entries: entries,
            liveEditEntry: liveEditEntry,
            editId: editId
          });
        });
      } else {
        error = {
          status: '404',
          stack: 'You have attemped to gail access to stock ' + stockname + '\n But you do not have that stock!'
        };
        return res.render('error', {
          error: error
        });
      }
    });
  });

  controller.post('/addentry', function(req, res) {
    var collection, entry;
    entry = req.body;
    collection = db.get('entries');
    return getEntryCountMatchingData(collection, entry).then(function(count) {
      var query;
      if (count === 0) {
        insertAndReCalculate(db, entry);
        return res.redirect('/stock?stockname=' + entry.stockname);
      } else {
        query = '';
        Object.keys(entry).forEach(function(k) {
          return query += '&' + k + '=' + entry[k];
        });
        return res.redirect('/stock?' + query);
      }
    });
  });

  controller.post('/editmode', function(req, res) {
    var entry;
    entry = req.body;
    return res.redirect('stock?stockname=' + entry.stockname + '&edit=true' + '&_id=' + entry._id);
  });

  controller.post('/editentry', function(req, res) {
    var collection, entry;
    entry = req.body;
    collection = db.get('entries');
    collection.remove({
      _id: entry._id
    }, function(err) {
      if (err) {
        return res.send('There was a problem deleting the information to the database.');
      }
    });
    return getEntryCountMatchingData(collection, entry).then(function(count) {
      insertAndReCalculate(db, entry);
      if (count === 0) {
        return res.redirect('/stock?stockname=' + entry.stockname);
      } else {
        return res.redirect('stock?stockname=' + entry.stockname + '&edit=true' + '&_id=' + entry._id);
      }
    });
  });

  controller.post('/canceledit', function(req, res) {
    var entry;
    entry = req.body;
    return res.redirect('stock?stockname=' + entry.stockname);
  });

  controller.post('/deleteentry', function(req, res) {
    var collection, entry;
    entry = req.body;
    collection = db.get('entries');
    collection.remove({
      _id: entry._id
    }, function(err) {
      if (err) {
        return res.send('There was a problem deleting the information to the database.');
      }
    });
    return res.redirect('stock?stockname=' + entry.stockname);
  });

  module.exports = controller;

  getEntryCountMatchingData = function(entriesCollection, entry) {
    return entriesCollection.count({
      stockname: entry.stockname,
      year: entry.year,
      month: entry.month,
      day: entry.day,
      tradenumber: entry.tradenumber
    });
  };

  insertAndReCalculate = function(db, newEntry) {
    var entriesCollection, stocksCollection;
    entriesCollection = db.get('entries');
    stocksCollection = db.get('stocklist');
    entriesCollection.insert(newEntry);
    return entriesCollection.find({
      stockname: newEntry.stockname
    }, {
      sort: {
        year: 1,
        month: 1,
        day: 1,
        tradenumber: 1
      }
    }, function(err, entries) {
      if (err) {
        console.log(err);
      }
      return stocksCollection.findOne({
        stockname: newEntry.stockname
      }, function(err, initialValues) {
        var entry, i, lastEntry, len, ref, results;
        console.log(initialValues);
        lastEntry = {
          quanity: initialValues.number,
          totalshares: initialValues.number,
          acbperunit: (ref = initialValues.number === 0) != null ? ref : {
            0: initialValues.acb / initialValues.number
          },
          acbtotal: initialValues.acb
        };
        results = [];
        for (i = 0, len = entries.length; i < len; i++) {
          entry = entries[i];
          results.push(entriesCollection.remove({
            _id: entry._id
          }, function(err) {
            if (err) {
              res.send('There was a problem deleting the information to the database.');
            }
            if (entry.buysell === 'buy') {
              entry.totalshares = lastEntry.totalshares + entry.quanity;
              entry.acbtotal = lastEntry.acbtotal + (entry.price * entry.quanity) + entry.commission;
              entry.acbperunit = entry.acbtotal / entry.totalshares;
            } else if (entry.buysell === 'sell') {
              entry.totalshares = lastEntry.totalshares - entry.quanity;
              if (entry.totalshares < 0) {
                entry.problem = true;
              }
              if (entry.totalshares === 0) {
                entry.acbtotal = 0;
                entry.acbperunit = 0;
              } else {
                entry.acbtotal = lastEntry.getACBTotal - (entry.quanity * lastEntry.acbtotal / lastEntry.totalshares);
                entry.acbperunit = entry.acbtotal / entry.totalshares;
              }
              entry.capitalgainloss = ((entry.price * entry.quanity) - entry.commission) - (lastEntry.acbperunit * entry.quanity);
            } else {
              console.log('we have a problem');
            }
            entriesCollection.insert(entry);
            return lastEntry = entry;
          }));
        }
        return results;
      });
    });
  };

}).call(this);
